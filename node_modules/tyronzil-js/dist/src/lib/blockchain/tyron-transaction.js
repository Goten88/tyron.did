"use strict";
/*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransitionTag = exports.InitTyronSM = void 0;
const zcrypto = __importStar(require("@zilliqa-js/crypto"));
const Util = __importStar(require("@zilliqa-js/util"));
const zilliqa_init_1 = __importDefault(require("./zilliqa-init"));
const smart_util_1 = __importDefault(require("./smart-contracts/smart-util"));
const ErrorCode_1 = __importDefault(require("../decentralized-identity/util/ErrorCode"));
const log_colors_1 = __importDefault(require("../../bin/log-colors"));
/** The `init.tyron smart-contracts` */
var InitTyronSM;
(function (InitTyronSM) {
    InitTyronSM["Testnet"] = "0x08392647c23115f1d027b9d2bbcc9f532b0f003a";
    InitTyronSM["Mainnet"] = "0x1c8272a79b5b4920bcae80f310d638c8dd4bd8aa";
})(InitTyronSM = exports.InitTyronSM || (exports.InitTyronSM = {}));
class TyronTransaction extends zilliqa_init_1.default {
    constructor(network, initTyron, clientPrivateKey, clientAddr, gasPrice, gasLimit, contractOwner) {
        super(network);
        this.init_tyron = initTyron;
        this.client_privateKey = clientPrivateKey;
        this.client_addr = clientAddr;
        this.contract_owner = contractOwner;
        this.gas_price = gasPrice;
        this.gas_limit = gasLimit;
    }
    /** Retrieves the minimum gas price & validates the client and user info */
    static initialize(network, initTyron, clientPrivateKey, gasLimit, userAddr) {
        return __awaiter(this, void 0, void 0, function* () {
            let CONTRACT_OWNER;
            if (userAddr !== undefined) {
                CONTRACT_OWNER = zcrypto.fromBech32Address(userAddr);
            }
            const CLIENT_ADDR = zcrypto.getAddressFromPrivateKey(clientPrivateKey);
            let GAS_LIMIT;
            if (!Number(gasLimit) || Number(gasLimit) < 0) {
                throw new ErrorCode_1.default("WrongAmount", "The gas limit MUST be a number greater than 0");
            }
            else {
                GAS_LIMIT = new Util.Long(Number(gasLimit));
            }
            const ZIL_INIT = new zilliqa_init_1.default(network);
            const transaction_init = yield ZIL_INIT.API.blockchain.getMinimumGasPrice()
                .then(min_gas_price => {
                const GAS_PRICE = new Util.BN(min_gas_price.result);
                console.log(log_colors_1.default.yellow(`The minimum gas price retrieved from the network is: `) + log_colors_1.default.brightYellow(`${Number(GAS_PRICE) / 1000000000000} ZIL`));
                return new TyronTransaction(network, initTyron, clientPrivateKey, CLIENT_ADDR, GAS_PRICE, GAS_LIMIT, CONTRACT_OWNER);
            })
                .catch(err => { throw err; });
            return transaction_init;
        });
    }
    /***            ****            ***/
    /** Deploys the DID-SC by version
     * & calls the ContractInit transition with the client_addr */
    static deploy(input, version) {
        return __awaiter(this, void 0, void 0, function* () {
            const deployed_contract = yield smart_util_1.default.decode(input.API, input.init_tyron, version)
                .then(contract_code => {
                console.log(log_colors_1.default.brightGreen(`DID-SC-code successfully downloaded & decoded from the "init.tyron" smart-contract!`));
                const CONTRACT_INIT = [
                    {
                        vname: '_scilla_version',
                        type: 'Uint32',
                        value: '0',
                    },
                    {
                        vname: 'contract_owner',
                        type: 'ByStr20',
                        value: `${input.contract_owner}`,
                    },
                    {
                        vname: 'init_tyron',
                        type: 'ByStr20',
                        value: `${input.init_tyron}`,
                    }
                ];
                const CONTRACT = input.API.contracts.new(contract_code, CONTRACT_INIT);
                return CONTRACT;
            })
                .then((contract) => __awaiter(this, void 0, void 0, function* () {
                console.log(log_colors_1.default.yellow(`The user's DID-SC got properly instantiated: `) + log_colors_1.default.brightYellow(`${JSON.stringify(contract, null, 2)}`));
                input.API.wallet.addByPrivateKey(input.client_privateKey);
                const CLIENT_BALANCE = yield input.API.blockchain.getBalance(input.client_addr);
                console.log(log_colors_1.default.brightGreen(`Deploying...`));
                const [deployTx, tyron_smart_contract] = yield contract.deploy({
                    version: input.zil_version,
                    gasPrice: input.gas_price,
                    gasLimit: input.gas_limit,
                    nonce: Number(CLIENT_BALANCE.result.nonce) + 1,
                }, 33, 1000, false);
                const IS_DEPLOYED = deployTx.isConfirmed();
                if (!IS_DEPLOYED) {
                    throw new ErrorCode_1.default("Wrong-Deployment", "The user's DID-SC did not get deployed");
                }
                console.log(log_colors_1.default.yellow(`The user's Tyron DID-Smart-Contract is deployed: `) + log_colors_1.default.brightYellow(`${IS_DEPLOYED}`));
                console.log(log_colors_1.default.yellow(`Its Zilliqa address is: `) + log_colors_1.default.brightYellow(`${tyron_smart_contract.address}`));
                console.log(log_colors_1.default.yellow(`Deployment Transaction ID: `) + log_colors_1.default.brightYellow(`${deployTx.id}`));
                const DEPLOYMENT_GAS = (deployTx.getReceipt()).cumulative_gas;
                console.log(log_colors_1.default.yellow(`The total gas consumed by deploying the DID-SC was: `) + log_colors_1.default.brightYellow(`${DEPLOYMENT_GAS}`));
                const DEPLOYED_CONTRACT = {
                    transaction: deployTx,
                    contract: tyron_smart_contract
                };
                return DEPLOYED_CONTRACT;
            }))
                .then((deployed_contract) => __awaiter(this, void 0, void 0, function* () {
                console.log(log_colors_1.default.brightGreen(`Calling the ContractInit transition...`));
                const CALL = yield deployed_contract.contract.call('ContractInit', [
                    {
                        vname: 'clientAddress',
                        type: 'String',
                        value: `${input.client_addr}`
                    }
                ], {
                    version: input.zil_version,
                    amount: new Util.BN(0),
                    gasPrice: input.gas_price,
                    gasLimit: input.gas_limit
                }, 33, 1000, false);
                console.log(log_colors_1.default.yellow(`The user's Tyron DID-Smart-Contract is initialized: `) + log_colors_1.default.brightYellow(`${CALL.isConfirmed()}`));
                const CUMULATIVE_GAS = (CALL.getReceipt()).cumulative_gas;
                console.log(log_colors_1.default.yellow(`The total gas consumed by the ContractInit transition was: `) + log_colors_1.default.brightYellow(`${CUMULATIVE_GAS}`));
                return deployed_contract;
            }))
                .catch(err => { throw err; });
            return deployed_contract;
        });
    }
    /** Submits a tyronZIL transaction (DID operation) */
    static submit(input, tyronAddr, tag, params) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(log_colors_1.default.brightGreen(`Processing the ${tag} tyronZIL transaction...`));
            yield input.API.blockchain.getSmartContractState(tyronAddr)
                .then((SMART_CONTRACT_STATE) => __awaiter(this, void 0, void 0, function* () {
                return SMART_CONTRACT_STATE.result.operation_cost;
            }))
                .then((operation_cost) => __awaiter(this, void 0, void 0, function* () {
                const AMOUNT = new Util.BN(operation_cost);
                const CLIENT_PUBKEY = zcrypto.getPubKeyFromPrivateKey(input.client_privateKey);
                const CLIENT_ADDR = zcrypto.getAddressFromPrivateKey(input.client_privateKey);
                const CLIENT_BALANCE = yield input.API.blockchain.getBalance(CLIENT_ADDR);
                const TRANSITION = {
                    _tag: tag,
                    _amount: String(AMOUNT),
                    _sender: CLIENT_ADDR,
                    params: params
                };
                const TX_OBJECT = {
                    version: input.zil_version,
                    amount: AMOUNT,
                    nonce: Number(CLIENT_BALANCE.result.nonce) + 1,
                    gasLimit: input.gas_limit,
                    gasPrice: input.gas_price,
                    toAddr: tyronAddr,
                    pubKey: CLIENT_PUBKEY,
                    data: JSON.stringify(TRANSITION),
                };
                const RAW_TX = input.API.transactions.new(TX_OBJECT);
                return RAW_TX;
            }))
                .then((raw_tx) => __awaiter(this, void 0, void 0, function* () {
                input.API.wallet.addByPrivateKey(input.client_privateKey);
                const SIGNED_TX = yield input.API.wallet.signWith(raw_tx, input.client_addr);
                return SIGNED_TX;
            }))
                .then((signed_tx) => __awaiter(this, void 0, void 0, function* () {
                /** Sends the transaction to the Zilliqa blockchain platform */
                const TX = yield input.API.blockchain.createTransaction(signed_tx, 33, 1000);
                return TX;
            }))
                .then((transaction) => __awaiter(this, void 0, void 0, function* () {
                const TRAN_ID = transaction.id;
                const TRANSACTION = yield transaction.confirm(TRAN_ID, 33, 1000);
                console.log(log_colors_1.default.yellow(`For testing purposes, disclosing the ${tag} tyronZIL transaction: `) + log_colors_1.default.brightYellow(`${JSON.stringify(TRANSACTION, null, 2)}`));
                const STATUS = transaction.isConfirmed();
                console.log(log_colors_1.default.yellow(`The transaction is confirmed: `) + log_colors_1.default.brightYellow(`${STATUS}`));
                if (STATUS) {
                    console.log(log_colors_1.default.brightGreen(`The ${tag} tyronZIL transaction has been successful!`));
                }
                else {
                    console.log(log_colors_1.default.red(`The ${tag} tyronZIL transaction has been unsuccessful!`));
                }
                const TX_RECEIPT = transaction.getReceipt();
                const CUMULATIVE_GAS = TX_RECEIPT.cumulative_gas;
                console.log(log_colors_1.default.yellow(`The total gas consumed in this ${tag} transaction was: `) + log_colors_1.default.brightYellow(`${CUMULATIVE_GAS}`));
            }))
                .catch(err => { throw err; });
        });
    }
    static create(document, didContractOwner, signature, updateKey, recoveryKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const PARAMS = [];
            const DOCUMENT = {
                vname: 'document',
                type: 'ByStr',
                value: document,
            };
            PARAMS.push(DOCUMENT);
            const DID_CONTRACT_OWNER = {
                vname: 'didContractOwner',
                type: 'ByStr33',
                value: didContractOwner,
            };
            PARAMS.push(DID_CONTRACT_OWNER);
            const SIGNATURE = {
                vname: 'signature',
                type: 'ByStr64',
                value: signature,
            };
            PARAMS.push(SIGNATURE);
            const UPDATE_KEY = {
                vname: 'updateKey',
                type: 'ByStr33',
                value: updateKey,
            };
            PARAMS.push(UPDATE_KEY);
            const RECOVERY_KEY = {
                vname: 'recoveryKey',
                type: 'ByStr33',
                value: recoveryKey,
            };
            PARAMS.push(RECOVERY_KEY);
            return PARAMS;
        });
    }
    static update(newDocument, signature, newUpdateKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const PARAMS = [];
            const DOCUMENT = {
                vname: 'newDocument',
                type: 'ByStr',
                value: newDocument,
            };
            PARAMS.push(DOCUMENT);
            const SIGNATURE = {
                vname: 'signature',
                type: 'ByStr64',
                value: signature,
            };
            PARAMS.push(SIGNATURE);
            const NEW_UPDATE_KEY = {
                vname: 'newUpdateKey',
                type: 'ByStr33',
                value: newUpdateKey,
            };
            PARAMS.push(NEW_UPDATE_KEY);
            return PARAMS;
        });
    }
    static recover(newDocument, signature, newUpdateKey, newRecoveryKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const PARAMS = [];
            const DOCUMENT = {
                vname: 'newDocument',
                type: 'ByStr',
                value: newDocument,
            };
            PARAMS.push(DOCUMENT);
            const SIGNATURE = {
                vname: 'signature',
                type: 'ByStr64',
                value: signature,
            };
            PARAMS.push(SIGNATURE);
            const NEW_UPDATE_KEY = {
                vname: 'newUpdateKey',
                type: 'ByStr33',
                value: newUpdateKey,
            };
            PARAMS.push(NEW_UPDATE_KEY);
            const NEW_RECOVERY_KEY = {
                vname: 'newRecoveryKey',
                type: 'ByStr33',
                value: newRecoveryKey,
            };
            PARAMS.push(NEW_RECOVERY_KEY);
            return PARAMS;
        });
    }
    static deactivate(signature) {
        return __awaiter(this, void 0, void 0, function* () {
            const PARAMS = [];
            const SIGNATURE = {
                vname: 'signature',
                type: 'ByStr64',
                value: signature,
            };
            PARAMS.push(SIGNATURE);
            return PARAMS;
        });
    }
}
exports.default = TyronTransaction;
var TransitionTag;
(function (TransitionTag) {
    TransitionTag["Create"] = "DidCreate";
    TransitionTag["Update"] = "DidUpdate";
    TransitionTag["Recover"] = "DidRecover";
    TransitionTag["Deactivate"] = "DidDeactivate";
})(TransitionTag = exports.TransitionTag || (exports.TransitionTag = {}));
//# sourceMappingURL=tyron-transaction.js.map