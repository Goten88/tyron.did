/// <reference types="bn.js" />
/// <reference types="long" />
import { Transaction } from '@zilliqa-js/account';
import { Contract } from '@zilliqa-js/contract';
import * as Util from '@zilliqa-js/util';
import ZilliqaInit from './zilliqa-init';
import { NetworkNamespace } from '../decentralized-identity/tyronZIL-schemes/did-scheme';
/** The `init.tyron smart-contracts` */
export declare enum InitTyronSM {
    Testnet = "0x08392647c23115f1d027b9d2bbcc9f532b0f003a",
    Mainnet = "0x1c8272a79b5b4920bcae80f310d638c8dd4bd8aa"
}
export default class TyronTransaction extends ZilliqaInit {
    /** The Zilliqa address where the `init.tyron smart-contract` resides */
    readonly init_tyron: InitTyronSM;
    /** The client's private key */
    private readonly client_privateKey;
    /** The client's address */
    readonly client_addr: string;
    /** The user is the owner of their DID-SC */
    readonly contract_owner?: string;
    readonly gas_price: Util.BN;
    readonly gas_limit: Util.Long;
    private constructor();
    /** Retrieves the minimum gas price & validates the client and user info */
    static initialize(network: NetworkNamespace, initTyron: InitTyronSM, clientPrivateKey: string, gasLimit: string, userAddr?: string): Promise<TyronTransaction>;
    /***            ****            ***/
    /** Deploys the DID-SC by version
     * & calls the ContractInit transition with the client_addr */
    static deploy(input: TyronTransaction, version: string): Promise<DeployedContract>;
    /** Submits a tyronZIL transaction (DID operation) */
    static submit(input: TyronTransaction, tyronAddr: string, tag: TransitionTag, params: TransitionParams[]): Promise<void>;
    static create(document: string, didContractOwner: string, signature: string, updateKey: string, recoveryKey: string): Promise<TransitionParams[]>;
    static update(newDocument: string, signature: string, newUpdateKey: string): Promise<TransitionParams[]>;
    static recover(newDocument: string, signature: string, newUpdateKey: string, newRecoveryKey: string): Promise<TransitionParams[]>;
    static deactivate(signature: string): Promise<TransitionParams[]>;
}
/***            ** interfaces **            ***/
/** The result of a DID-SC deployment */
export interface DeployedContract {
    transaction: Transaction;
    contract: Contract;
}
export declare enum TransitionTag {
    Create = "DidCreate",
    Update = "DidUpdate",
    Recover = "DidRecover",
    Deactivate = "DidDeactivate"
}
interface TransitionParams {
    vname: string;
    type: any;
    value: unknown;
}
export {};
