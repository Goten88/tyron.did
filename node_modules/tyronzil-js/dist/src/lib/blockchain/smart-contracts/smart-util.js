"use strict";
/*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const log_colors_1 = __importDefault(require("../../../bin/log-colors"));
const readline = __importStar(require("readline-sync"));
const fs = __importStar(require("fs"));
const util = __importStar(require("util"));
const zlib = __importStar(require("zlib"));
/** Tools to manage smart contracts */
class SmartUtil {
    /** Encodes the given contract into a Base64URL string to save it into the init.tyron smart contract */
    static encode() {
        return __awaiter(this, void 0, void 0, function* () {
            const contractName = readline.question(log_colors_1.default.green(`What is the name of the contract that you'd like to encode? - `) + log_colors_1.default.lightBlue(`Your answer: `));
            try {
                const CONTRACT_STRING = (fs.readFileSync(`src/lib/blockchain/smart-contracts/${contractName}.scilla`)).toString();
                const COMPRESSED_CONTRACT = yield (util.promisify(zlib.gzip))(CONTRACT_STRING);
                console.log(COMPRESSED_CONTRACT.toString('base64'));
                console.log(`The size of the compressed smart-contract is: ${COMPRESSED_CONTRACT.byteLength}`);
            }
            catch (error) {
                console.error(error);
            }
        });
    }
    /** Fetches the `Tyron DID-Smart-Contract` by version & decodes it */
    static decode(api, initTyron, contractVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            const INIT_TYRON = initTyron;
            const THIS_CONTRACT = yield api.blockchain.getSmartContractState(INIT_TYRON)
                .then((STATE) => __awaiter(this, void 0, void 0, function* () {
                const INIT = {
                    didcCode: STATE.result.didc_code,
                };
                const CONTRACTS = Object.entries(INIT.didcCode);
                let ENCODED_CONTRACT;
                CONTRACTS.forEach((value) => {
                    if (value[0] === contractVersion) {
                        ENCODED_CONTRACT = value[1];
                    }
                });
                const COMPRESSED_CONTRACT = Buffer.from(ENCODED_CONTRACT, 'base64');
                const DECOMPRESSED_CONTRACT = yield (util.promisify(zlib.unzip))(COMPRESSED_CONTRACT);
                return DECOMPRESSED_CONTRACT.toString();
            }))
                .catch(err => { throw err; });
            return THIS_CONTRACT;
        });
    }
    /** Gets the value out of a DIDC field Option */
    static getValue(object) {
        return __awaiter(this, void 0, void 0, function* () {
            const ENTRIES = Object.entries(object);
            let VALUE;
            ENTRIES.forEach((value) => {
                if (value[0] === "arguments") {
                    VALUE = value[1];
                }
            });
            return VALUE[0];
        });
    }
    /** Gets the DID-Status out of a DIDC field Option */
    static getStatus(object) {
        return __awaiter(this, void 0, void 0, function* () {
            const ENTRIES = Object.entries(object);
            let VALUE;
            ENTRIES.forEach((value) => {
                if (value[0] === "constructor") {
                    VALUE = value[1];
                }
            });
            return VALUE;
        });
    }
    /** Gets the value out of a map key */
    static getValuefromMap(object, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const ENTRIES = Object.entries(object);
            let VALUE;
            ENTRIES.forEach((value) => {
                if (value[0] === key) {
                    VALUE = value[1];
                }
            });
            return VALUE;
        });
    }
    /** Turns the smart contract's map into a Map */
    static intoMap(object) {
        return __awaiter(this, void 0, void 0, function* () {
            const ENTRIES = Object.entries(object);
            let MAP = new Map();
            ENTRIES.forEach((value) => {
                MAP.set(value[0], value[1]);
            });
            return MAP;
        });
    }
    /** Turns the DIDC `services` map field into a Map */
    static fromServices(object) {
        return __awaiter(this, void 0, void 0, function* () {
            const PREV_MAP = yield this.intoMap(object);
            let MAP = new Map();
            for (let id of PREV_MAP.keys()) {
                const OBJECT = PREV_MAP.get(id);
                const ENTRIES = Object.entries(OBJECT);
                ENTRIES.forEach((value) => {
                    if (value[0] === "arguments") {
                        const VALUE = value[1];
                        const TYPE = VALUE[0];
                        const URI = VALUE[1];
                        MAP.set(id, [TYPE, URI]);
                    }
                });
            }
            ;
            return MAP;
        });
    }
}
exports.default = SmartUtil;
//# sourceMappingURL=smart-util.js.map