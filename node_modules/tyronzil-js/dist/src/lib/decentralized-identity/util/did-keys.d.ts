import { TransitionValue } from '../../blockchain/tyronzil';
import { PrivateKeyModel, PublicKeyModel } from '../protocols/models/verification-method-models';
/** Defines input data to generate a cryptographic key pair */
export interface OperationKeyPairInput {
    id: string;
}
/** Generates cryptographic operations */
export declare class Cryptography {
    /** Asymmetric cryptography to generate the key pair using the KEY_ALGORITHM (secp256k1)
     * @returns [publicKey, privateKey] */
    static operationKeyPair(input: OperationKeyPairInput): Promise<[TransitionValue, PrivateKeyModel]>;
    /** Generates a secp256k1 key pair
     * @returns [publicKey, privateKey] */
    static keyPair(id: string): Promise<[string, PrivateKeyModel]>;
    static processKeys(input: PublicKeyModel[] | PrivateKeyModel[]): Promise<TyronPublicKeys | TyronPrivateKeys>;
}
export interface TyronPublicKeys {
    general?: string;
    authentication?: string;
    assertion?: string;
    agreement?: string;
    invocation?: string;
    delegation?: string;
    xsgd?: string;
}
export interface TyronPrivateKeys extends TyronPublicKeys {
    did_update?: string;
    did_recovery?: string;
}
