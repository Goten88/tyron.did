"use strict";
/*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tyron_state_1 = __importDefault(require("../blockchain/tyron-state"));
const did_url_scheme_1 = __importDefault(require("./tyronZIL-schemes/did-url-scheme"));
/** The Tyron DID-State */
class DidState {
    constructor(state) {
        this.contractOwner = state.contractOwner;
        this.decentralized_identifier = state.decentralized_identifier;
        this.did_status = state.did_status;
        this.tyron_hash = state.tyron_hash;
        this.verification_methods = state.verification_methods;
        this.services = state.services;
        this.did_update_key = state.did_update_key;
        this.did_recovery_key = state.did_recovery_key;
    }
    /***            ****            ***/
    /** Fetches the current DID-State for the given tyron_addr */
    static fetch(network, didcAddr) {
        return __awaiter(this, void 0, void 0, function* () {
            const did_state = yield tyron_state_1.default.fetch(network, didcAddr)
                .then((tyron_state) => __awaiter(this, void 0, void 0, function* () {
                // Validates the Tyron DID-Scheme
                yield did_url_scheme_1.default.validate(tyron_state.decentralized_identifier);
                const THIS_STATE = {
                    contractOwner: tyron_state.contractOwner,
                    decentralized_identifier: tyron_state.decentralized_identifier,
                    did_status: tyron_state.did_status,
                    tyron_hash: tyron_state.tyron_hash,
                    verification_methods: tyron_state.verification_methods,
                    services: tyron_state.services,
                    did_update_key: tyron_state.did_update_key,
                    did_recovery_key: tyron_state.did_recovery_key
                };
                return new DidState(THIS_STATE);
            }))
                .catch(err => { throw err; });
            return did_state;
        });
    }
}
exports.default = DidState;
//# sourceMappingURL=did-state.js.map