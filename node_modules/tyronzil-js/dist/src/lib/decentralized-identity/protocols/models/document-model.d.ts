import { PublicKeyInput } from '../../../../bin/util';
import { TransitionValue } from '../../../blockchain/tyronzil';
export declare enum DocumentElement {
    VerificationMethod = "key",
    Service = "service"
}
export interface ServiceModel {
    id: string;
    transferProtocol: DataTransferProtocol;
    type: string;
    uri: string;
}
export declare enum Action {
    Adding = "Add",
    Removing = "Remove"
}
export declare enum DataTransferProtocol {
    Https = "Https",
    Git = "Git",
    Ssh = "Ssh"
}
/** Sidetreee Service Endpoint for the 'service' property of the DID-Document */
export interface DidServiceEndpointModel {
    id: string;
    type: string;
    endpoint: string;
}
export interface PatchModel {
    action: PatchAction;
    ids?: string[];
    keyInput?: PublicKeyInput[];
    services?: TransitionValue[];
}
export declare enum PatchAction {
    AddKeys = "add-public-keys",
    RemoveKeys = "remove-public-keys",
    AddServices = "add-service-endpoints",
    RemoveServices = "remove-service-endpoints",
    CustomAction = "-custom-action"
}
