"use strict";
/*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sidetree_1 = require("../protocols/sidetree");
const did_keys_1 = require("../util/did-keys");
/** Generates a `Tyron DID-Create` operation
 *  which produces the `DID-Document` & metadata */
class DidCreate {
    /***            ****            ***/
    constructor(operation) {
        this.type = sidetree_1.OperationType.Create;
        this.document = operation.document;
        this.updateKey = "0x" + operation.updateKey;
        this.recoveryKey = "0x" + operation.recoveryKey;
        this.privateKeys = operation.privateKeys;
    }
    /***            ****            ***/
    /** Generates a Tyron `DID-Create` operation with input from the CLI */
    static execute(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const VERIFICATION_METHODS = [];
            const PRIVATE_KEY_MODEL = [];
            for (const key_input of input.publicKeyInput) {
                // Creates the cryptographic key pair
                const KEY_PAIR_INPUT = {
                    id: key_input.id
                };
                const [VERIFICATION_METHOD, PRIVATE_KEY] = yield did_keys_1.Cryptography.operationKeyPair(KEY_PAIR_INPUT);
                VERIFICATION_METHODS.push(VERIFICATION_METHOD);
                PRIVATE_KEY_MODEL.push(PRIVATE_KEY);
            }
            const DOCUMENT = VERIFICATION_METHODS.concat(input.services);
            // Creates the update key-pair (necessary for the next update operation)
            const [UPDATE_KEY, UPDATE_PRIVATE_KEY] = yield did_keys_1.Cryptography.keyPair("update");
            PRIVATE_KEY_MODEL.push(UPDATE_PRIVATE_KEY);
            // Creates the recovery key-pair (necessary for next recovery or deactivate operation)
            const [RECOVERY_KEY, RECOVERY_PRIVATE_KEY] = yield did_keys_1.Cryptography.keyPair("recovery");
            PRIVATE_KEY_MODEL.push(RECOVERY_PRIVATE_KEY);
            const PRIVATE_KEYS = yield did_keys_1.Cryptography.processKeys(PRIVATE_KEY_MODEL);
            /** Output data from a Tyron `DID-Create` operation */
            const OPERATION_OUTPUT = {
                document: DOCUMENT,
                updateKey: UPDATE_KEY,
                recoveryKey: RECOVERY_KEY,
                privateKeys: PRIVATE_KEYS
            };
            return new DidCreate(OPERATION_OUTPUT);
        });
    }
}
exports.default = DidCreate;
//# sourceMappingURL=did-create.js.map