"use strict";
/*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const zcrypto = __importStar(require("@zilliqa-js/crypto"));
const sidetree_1 = require("../protocols/sidetree");
const did_keys_1 = require("../util/did-keys");
/** Generates a `Tyron DID-Recover` operation */
class DidRecover {
    /***            ****            ***/
    constructor(operation) {
        this.type = sidetree_1.OperationType.Recover;
        this.decentralized_identifier = operation.did;
        this.newDocument = operation.newDocument;
        this.docHash = "0x" + operation.docHash;
        this.signature = "0x" + operation.signature;
        this.newUpdateKey = "0x" + operation.newUpdateKey;
        this.newRecoveryKey = "0x" + operation.newRecoveryKey;
        this.privateKeys = operation.privateKeys;
    }
    /** Generates a `Tyron DID-Recover` operation */
    static execute(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const VERIFICATION_METHODS = [];
            const PRIVATE_KEY_MODEL = [];
            const PUBLIC_KEY_INPUT = input.cliInput.publicKeyInput;
            for (const key_input of PUBLIC_KEY_INPUT) {
                // Creates the cryptographic key pair
                const KEY_PAIR_INPUT = {
                    id: key_input.id
                };
                const [VERIFICATION_METHOD, PRIVATE_KEY] = yield did_keys_1.Cryptography.operationKeyPair(KEY_PAIR_INPUT);
                VERIFICATION_METHODS.push(VERIFICATION_METHOD);
                PRIVATE_KEY_MODEL.push(PRIVATE_KEY);
            }
            const DOCUMENT = VERIFICATION_METHODS.concat(input.cliInput.services);
            const DOC_OBJECT = Object.assign({}, DOCUMENT);
            const DOC_BUFFER = Buffer.from(JSON.stringify(DOC_OBJECT));
            const DOC_HASH = require("crypto").createHash("sha256").update(DOC_BUFFER).digest('hex');
            const PREVIOUS_RECOVERY_KEY = zcrypto.getPubKeyFromPrivateKey(input.recoveryPrivateKey);
            const SIGNATURE = zcrypto.sign(Buffer.from(DOC_HASH, 'hex'), input.recoveryPrivateKey, PREVIOUS_RECOVERY_KEY);
            /** Key-pair for the next DID-Upate operation */
            const [UPDATE_KEY, UPDATE_PRIVATE_KEY] = yield did_keys_1.Cryptography.keyPair("update");
            PRIVATE_KEY_MODEL.push(UPDATE_PRIVATE_KEY);
            /** Key-pair for the next DID-Recover or Deactivate operation */
            const [RECOVERY_KEY, RECOVERY_PRIVATE_KEY] = yield did_keys_1.Cryptography.keyPair("recovery");
            PRIVATE_KEY_MODEL.push(RECOVERY_PRIVATE_KEY);
            const PRIVATE_KEYS = yield did_keys_1.Cryptography.processKeys(PRIVATE_KEY_MODEL);
            /** Output data from a Tyron `DID-Recover` operation */
            const OPERATION_OUTPUT = {
                did: input.did,
                newDocument: DOCUMENT,
                docHash: DOC_HASH,
                signature: SIGNATURE,
                newUpdateKey: UPDATE_KEY,
                newRecoveryKey: RECOVERY_KEY,
                privateKeys: PRIVATE_KEYS
            };
            return new DidRecover(OPERATION_OUTPUT);
        });
    }
}
exports.default = DidRecover;
//# sourceMappingURL=did-recover.js.map