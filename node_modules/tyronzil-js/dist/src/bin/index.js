#!/usr/bin/env node
"use strict";
// So `npm i` installs the CLI correctly across all operating systems
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
const yargs = __importStar(require("yargs"));
const tyronZIL_CLI_1 = __importDefault(require("./tyronZIL-CLI"));
const smart_util_1 = __importDefault(require("../lib/blockchain/smart-contracts/smart-util"));
yargs
    .scriptName('tyronzil')
    .usage('Usage: $0 <command> [options]')
    .demandCommand(1, 'Try: tyronzil <command>, with command = did OR resolve')
    .command('did', ' -> to execute a tyronZIL DID-operation, try: $tyronzil did <subcommand>, with subcommand = create|resolve|update|recover|deactivate', (yargs) => {
    yargs
        .usage('Usage: $0 did <subcommand> [options]')
        .demandCommand(1, 'Specify a subcommand: create|resolve|update|recover|deactivate')
        .command('create', ' -> creates a unique digital identity did:tyron:zil)', () => __awaiter(void 0, void 0, void 0, function* () {
        yield tyronZIL_CLI_1.default.handleCreate();
    }))
        .command('update', ' -> updates the given tyronZIL DID and its DID-state', () => __awaiter(void 0, void 0, void 0, function* () {
        yield tyronZIL_CLI_1.default.handleUpdate();
    }))
        .command('recover', ' -> recovers the given tyronZIL DID and creates a new DID-state)', () => __awaiter(void 0, void 0, void 0, function* () {
        yield tyronZIL_CLI_1.default.handleRecover();
    }))
        .command('deactivate', ' -> deactivates the given tyronZIL DID and its DID-state', () => __awaiter(void 0, void 0, void 0, function* () {
        yield tyronZIL_CLI_1.default.handleDeactivate();
    }))
        .wrap(null)
        .strict(); //the sub-command must be one of the explicitly defined sub-commands
})
    .command('resolve', ' -> resolves the given tyronZIL DID into its DID-document (read operation)', () => __awaiter(void 0, void 0, void 0, function* () {
    yield tyronZIL_CLI_1.default.handleResolve();
}))
    .command('dns', ` -> sets a DIDC's domain name`, () => __awaiter(void 0, void 0, void 0, function* () {
    yield tyronZIL_CLI_1.default.handleDns();
}))
    .command('ssitoken', ` -> initializes the SSI Token in the user's DIDC`, () => __awaiter(void 0, void 0, void 0, function* () {
    yield tyronZIL_CLI_1.default.handleSsiToken();
}))
    .command('donation', ` -> initializes the donation campaign code in the user's DIDC`, () => __awaiter(void 0, void 0, void 0, function* () {
    yield tyronZIL_CLI_1.default.handleDonation();
}))
    .command('donate', ` -> donates $XSGD to another tyron.did`, () => __awaiter(void 0, void 0, void 0, function* () {
    yield tyronZIL_CLI_1.default.handleDonate();
}))
    .command('encode', ' -> encodes the given contract into a Base64URL string', () => __awaiter(void 0, void 0, void 0, function* () {
    yield smart_util_1.default.encode();
}))
    .strict() // the command must be one of the explicitly defined commands
    .help(false) // disabling --help option
    .version(false) // disabling --version option
    .argv;
//# sourceMappingURL=index.js.map