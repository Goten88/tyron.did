"use strict";
/*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zcrypto = __importStar(require("@zilliqa-js/crypto"));
const fs = __importStar(require("fs"));
const log_colors_1 = __importDefault(require("./log-colors"));
const readline = __importStar(require("readline-sync"));
const document_model_1 = require("../lib/decentralized-identity/protocols/models/document-model");
const verification_method_models_1 = require("../lib/decentralized-identity/protocols/models/verification-method-models");
const ErrorCode_1 = __importDefault(require("../lib/decentralized-identity/util/ErrorCode"));
const tyronzil_1 = __importDefault(require("../lib/blockchain/tyronzil"));
class Util {
    /** Generates the keys' input */
    static InputKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(log_colors_1.default.brightGreen(`Cryptographic keys for your Decentralized Identifier: `));
            const KEY_ID_SET = new Set();
            const KEY_INPUT = [];
            console.log(log_colors_1.default.brightGreen(`You can have a key for each of the following purposes:
        $xSGD stablecoin(0),
        General(1),
        Authentication(2),
        Assertion(3),
        Agreement(4),
        Invocation(5), &
        Delegation(6)`));
            const amount = readline.question(log_colors_1.default.green(`How many of them would you like to add?`) + ` - up to [7] - ` + log_colors_1.default.lightBlue(`Your answer: `));
            if (Number(amount) > 6) {
                throw new ErrorCode_1.default("IncorrectAmount", "You may only have up to 7 keys, one for each purpose");
            }
            for (let i = 0, t = Number(amount); i < t; ++i) {
                const id = readline.question(log_colors_1.default.green(`Next, choose your key purpose`) + ` - [0/1/2/3/4/5/6] - ` + log_colors_1.default.lightBlue(`Your answer: `));
                if (id === "") {
                    throw new ErrorCode_1.default("InvalidID", `To register a key you must provide a valid purpose`);
                }
                let PURPOSE;
                switch (Number(id)) {
                    case 0:
                        PURPOSE = verification_method_models_1.PublicKeyPurpose.XSGD;
                        break;
                    case 1:
                        PURPOSE = verification_method_models_1.PublicKeyPurpose.General;
                        break;
                    case 2:
                        PURPOSE = verification_method_models_1.PublicKeyPurpose.Auth;
                        break;
                    case 3:
                        PURPOSE = verification_method_models_1.PublicKeyPurpose.Assertion;
                        break;
                    case 4:
                        PURPOSE = verification_method_models_1.PublicKeyPurpose.Agreement;
                        break;
                    case 5:
                        PURPOSE = verification_method_models_1.PublicKeyPurpose.Invocation;
                        break;
                    case 6:
                        PURPOSE = verification_method_models_1.PublicKeyPurpose.Delegation;
                        break;
                    default:
                        throw new ErrorCode_1.default("InvalidID", `To register a key you must provide a valid purpose`);
                }
                const KEY = {
                    id: PURPOSE
                };
                // IDs MUST be unique
                if (KEY_ID_SET.has(id)) {
                    throw new ErrorCode_1.default("DuplicatedID", "The key IDs MUST NOT be duplicated");
                }
                KEY_ID_SET.add(id);
                KEY_INPUT.push(KEY);
            }
            return KEY_INPUT;
        });
    }
    /***            ****            ***/
    /** Generates the DID services */
    static services() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(log_colors_1.default.brightGreen(`Service endpoints for your Decentralized Identifier:`));
            const SERVICES = [];
            const SERVICE_ID_SET = new Set();
            const amount = readline.question(log_colors_1.default.green(`How many services would you like to add? - `) + log_colors_1.default.lightBlue(`Your answer: `));
            if (!Number(amount) && Number(amount) !== 0 || Number(amount) < 0) {
                throw new ErrorCode_1.default("WrongAmount", "It must be a number greater than or equal to 0");
            }
            for (let i = 0, t = Number(amount); i < t; ++i) {
                const id = readline.question(log_colors_1.default.green(`What is the service ID? - `) + log_colors_1.default.lightBlue(`Your answer: `));
                const type = readline.question(log_colors_1.default.green(`What is the service type? - `) + ` - Defaults to 'website' - ` + log_colors_1.default.lightBlue(`Your answer: `));
                const data_transfer = readline.question(log_colors_1.default.green(`What is the data transfer protocol? https(1), git(2) or ssh(3)`) + ` - [1/2/3] - ` + log_colors_1.default.lightBlue(`Your answer: `));
                let DATA_TRANSFER;
                switch (Number(data_transfer)) {
                    case 1:
                        DATA_TRANSFER = document_model_1.DataTransferProtocol.Https;
                        break;
                    case 2:
                        DATA_TRANSFER = document_model_1.DataTransferProtocol.Git;
                        break;
                    case 3:
                        DATA_TRANSFER = document_model_1.DataTransferProtocol.Ssh;
                        break;
                    default:
                        throw new ErrorCode_1.default("InvalidInput", `That input in not allowed`);
                }
                const endpoint = readline.question(log_colors_1.default.green(`What is the service URI?`) + ` - [www.yourwebsite.com] - ` + log_colors_1.default.lightBlue(`Your answer: `));
                if (id === "" || endpoint === "") {
                    throw new ErrorCode_1.default("Invalid parameter", "To register a service-endpoint you must provide its ID, type and URL");
                }
                let TYPE;
                if (type !== "") {
                    TYPE = type;
                }
                else {
                    TYPE = "website";
                }
                // IDs MUST be unique
                if (!SERVICE_ID_SET.has(id)) {
                    SERVICE_ID_SET.add(id);
                    const SERVICE = {
                        id: id,
                        type: TYPE,
                        transferProtocol: DATA_TRANSFER,
                        uri: endpoint
                    };
                    const DOC_ELEMENT = yield tyronzil_1.default.documentElement(document_model_1.DocumentElement.Service, document_model_1.Action.Adding, undefined, SERVICE);
                    SERVICES.push(DOC_ELEMENT);
                }
                else {
                    throw new ErrorCode_1.default("CodeDocumentServiceIdDuplicated", "The service IDs MUST NOT be duplicated");
                }
            }
            return SERVICES;
        });
    }
    /** Saves the private keys */
    static savePrivateKeys(did, keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const KEY_FILE_NAME = `DID_PRIVATE_KEYS_${did}.json`;
            fs.writeFileSync(KEY_FILE_NAME, JSON.stringify(keys, null, 2));
            console.info(log_colors_1.default.yellow(`Private keys saved as: ${log_colors_1.default.brightYellow(KEY_FILE_NAME)}`));
        });
    }
    /** Verifies that the given key matches the DID-Key of the DIDC (did_update_key OR did_recovery_key) */
    static verifyKey(privateKey, didKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const PUB_KEY = "0x" + zcrypto.getPubKeyFromPrivateKey(privateKey);
            if (PUB_KEY === didKey) {
                console.log(log_colors_1.default.brightGreen(`Success! The private key corresponds to the public did_key stored in the DIDC`));
            }
            else {
                throw new ErrorCode_1.default("WrongKey", "The given key is not matching the corresponding key in the DIDC");
            }
        });
    }
}
exports.default = Util;
//# sourceMappingURL=util.js.map