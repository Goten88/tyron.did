import { PublicKeyPurpose } from '../lib/decentralized-identity/protocols/models/verification-method-models';
import { NetworkNamespace } from '../lib/decentralized-identity/tyronZIL-schemes/did-scheme';
import { TyronPrivateKeys } from '../lib/decentralized-identity/util/did-keys';
import { TransitionValue } from '../lib/blockchain/tyronzil';
export default class Util {
    /** Generates the keys' input */
    static InputKeys(): Promise<PublicKeyInput[]>;
    /***            ****            ***/
    /** Generates the DID services */
    static services(): Promise<TransitionValue[]>;
    /** Saves the private keys */
    static savePrivateKeys(did: string, keys: TyronPrivateKeys): Promise<void>;
    /** Verifies that the given key matches the DID-Key of the DIDC (did_update_key OR did_recovery_key) */
    static verifyKey(privateKey: string, didKey: string): Promise<void>;
}
/***            ** interfaces **            ***/
export interface CliInputModel {
    network: NetworkNamespace;
    publicKeyInput: PublicKeyInput[];
    services: TransitionValue[];
    userPrivateKey?: string;
}
export interface PublicKeyInput {
    id: PublicKeyPurpose;
}
