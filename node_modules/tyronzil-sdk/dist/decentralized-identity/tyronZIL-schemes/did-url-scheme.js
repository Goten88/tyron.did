"use strict";
/*
    tyronzil-sdk: Tyron DID SDK - Zilliqa's DID-Method at www.tyronZIL.com
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlParameters = void 0;
const did_scheme_1 = __importStar(require("./did-scheme"));
const ErrorCode_1 = __importDefault(require("../util/ErrorCode"));
var UrlParameters;
(function (UrlParameters) {
    UrlParameters["Hl"] = "hl";
    UrlParameters["Service"] = "service";
    UrlParameters["VersionId"] = "version-id";
    UrlParameters["VersionTime"] = "version-time";
    UrlParameters["InitialState"] = "sidetree-initial-state"; //initial self-certifying state, to use the DID immediately after generation without being anchored (unpublished DID)
})(UrlParameters = exports.UrlParameters || (exports.UrlParameters = {}));
class DidUrlScheme extends did_scheme_1.default {
    constructor(input) {
        super(input.schemeInput);
        this.didUrl = this.did + this.path + this.query + this.fragment;
        this.path = '/' + input.path;
        this.query = '?' + input.query;
        this.fragment = '#' + input.fragment;
        this.longFormDid = this.did + this.query;
    }
    /** Validates if the given DID is a proper Tyron Decentralized Identifier */
    static validate(did) {
        return __awaiter(this, void 0, void 0, function* () {
            const PREFIX = this.schemeIdentifier + this.methodName + this.blockchain;
            if (!did.startsWith(PREFIX)) {
                throw new ErrorCode_1.default("CodeIncorrectDidPrefix", "The given DID does not have the right prefix");
            }
            const NETWORK = did.substring(14, 19);
            if (NETWORK !== did_scheme_1.NetworkNamespace.Mainnet && NETWORK !== did_scheme_1.NetworkNamespace.Testnet && NETWORK !== did_scheme_1.NetworkNamespace.Isolated) {
                throw new ErrorCode_1.default("CodeIncorrectNetwork", "The network namespace is invalid");
            }
            const DID_SUFFIX = did.substring(19);
            const SCHEME_INPUT_DATA = {
                network: NETWORK,
                didUniqueSuffix: DID_SUFFIX
            };
            const DID = {
                schemeInput: SCHEME_INPUT_DATA
            };
            return new DidUrlScheme(DID);
        });
    }
}
exports.default = DidUrlScheme;
//# sourceMappingURL=did-url-scheme.js.map