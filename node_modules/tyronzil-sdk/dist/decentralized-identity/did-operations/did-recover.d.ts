import { OperationType } from '../protocols/sidetree';
import { TyronPrivateKeys } from '../util/did-keys';
import { TransitionValue } from '../../blockchain/tyronzil';
import { InputModel } from './did-create';
/** Generates a `Tyron DID-Recover` operation */
export default class DidRecover {
    readonly type = OperationType.Recover;
    readonly decentralized_identifier: string;
    readonly newDocument: TransitionValue[];
    readonly docHash: string;
    readonly signature: string;
    readonly newUpdateKey: string;
    readonly newRecoveryKey: string;
    readonly privateKeys: TyronPrivateKeys;
    /***            ****            ***/
    private constructor();
    /** Generates a `Tyron DID-Recover` operation */
    static execute(recover: RecoverOperationInput): Promise<DidRecover>;
}
/***            ** interfaces **            ***/
/** Defines input data for a `Tyron DID-Recover` operation */
export interface RecoverOperationInput {
    did: string;
    recoveryPrivateKey: string;
    input: InputModel;
}
