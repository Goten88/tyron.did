"use strict";
/*
    tyronzil-sdk: Tyron DID SDK - Zilliqa's DID-Method at www.tyronZIL.com
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zcrypto = __importStar(require("@zilliqa-js/crypto"));
const smart_util_1 = __importDefault(require("../../../blockchain/smart-contracts/smart-util"));
const zilliqa_init_1 = __importDefault(require("../../../blockchain/zilliqa-init"));
const ErrorCode_1 = __importDefault(require("../../util/ErrorCode"));
class Resolver {
    static validateAvatar(avatar) {
        return __awaiter(this, void 0, void 0, function* () {
            const regex = /^[\w\d_]+$/;
            if (!regex.test(avatar) || avatar.length > 15) {
                throw new ErrorCode_1.default("DomainNameInvalid", "The domain name must be 15 characters or less and contain only letters, numbers and underscores, and no spaces");
            }
        });
    }
    static resolveDns(network, initTyron, domainName) {
        return __awaiter(this, void 0, void 0, function* () {
            const ZIL_INIT = new zilliqa_init_1.default(network);
            const DOT_INDEX = domainName.lastIndexOf(".");
            const SSI_DOMAIN = domainName.substring(DOT_INDEX);
            const AVATAR = domainName.substring(0, DOT_INDEX);
            const DIDC_ADDRESS = yield this.validateAvatar(AVATAR)
                .then(() => __awaiter(this, void 0, void 0, function* () {
                return yield ZIL_INIT.API.blockchain.getSmartContractState(initTyron);
            }))
                .then((STATE) => __awaiter(this, void 0, void 0, function* () {
                return STATE.result.dns;
            }))
                .then((dns) => __awaiter(this, void 0, void 0, function* () {
                return yield smart_util_1.default.getValuefromMap(dns, SSI_DOMAIN);
            }))
                .then((resourceRecords) => __awaiter(this, void 0, void 0, function* () {
                return yield smart_util_1.default.getValuefromMap(resourceRecords, AVATAR);
            }))
                .catch((err) => { throw err; });
            return zcrypto.toBech32Address(DIDC_ADDRESS);
        });
    }
}
exports.default = Resolver;
//# sourceMappingURL=resolver.js.map