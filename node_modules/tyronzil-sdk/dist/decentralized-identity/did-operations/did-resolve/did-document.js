"use strict";
/*
    tyronzil-sdk: Tyron DID SDK - Zilliqa's DID-Method at www.tyronZIL.com
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Accept = void 0;
const zcrypto = __importStar(require("@zilliqa-js/crypto"));
const zilliqa_init_1 = __importDefault(require("../../../blockchain/zilliqa-init"));
const verification_method_models_1 = require("../../protocols/models/verification-method-models");
const did_url_scheme_1 = __importDefault(require("../../tyronZIL-schemes/did-url-scheme"));
const did_state_1 = __importDefault(require("./did-state"));
const ErrorCode_1 = __importDefault(require("../../util/ErrorCode"));
var Accept;
(function (Accept) {
    Accept["contentType"] = "application/did+json";
    Accept["Result"] = "application/did+json;profile='https://w3c-ccg.github.io/did-resolution'"; //requests a DID-Resolution-Result as output
})(Accept = exports.Accept || (exports.Accept = {}));
/** Generates a `Tyron DID-Document` */
class DidDoc {
    constructor(scheme) {
        this.id = scheme.id;
        this.publicKey = scheme.verificationMethods.publicKey;
        this.authentication = scheme.verificationMethods.authentication;
        this.assertionMethod = scheme.verificationMethods.assertionMethod;
        this.keyAgreement = scheme.verificationMethods.keyAgreement;
        this.capabilityInvocation = scheme.verificationMethods.capabilityDelegation;
        this.xsgdKey = scheme.verificationMethods.xsgdKey;
        this.service = scheme.service;
    }
    /***            ****            ***/
    /** The `Tyron DID-Resolution` method */
    static resolution(network, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const ACCEPT = input.metadata.accept;
            const ZIL_INIT = new zilliqa_init_1.default(network);
            const BLOCKCHAIN_INFO = yield ZIL_INIT.API.blockchain.getBlockChainInfo();
            let RESOLUTION_RESULT;
            const DID_RESOLVED = yield did_state_1.default.fetch(network, input.didcAddr)
                .then((did_state) => __awaiter(this, void 0, void 0, function* () {
                const DID_DOC = yield DidDoc.read(did_state);
                switch (ACCEPT) {
                    case Accept.contentType:
                        return DID_DOC;
                    case Accept.Result:
                        RESOLUTION_RESULT = {
                            id: DID_DOC.id,
                            resolutionMetadata: BLOCKCHAIN_INFO,
                            document: DID_DOC,
                            metadata: {
                                contentType: "application/did+json",
                                updateKey: did_state.did_update_key,
                                recoveryKey: did_state.did_recovery_key,
                            }
                        };
                        return RESOLUTION_RESULT;
                }
            }))
                .catch(err => { throw err; });
            return DID_RESOLVED;
        });
    }
    /***            ****            ***/
    /** Generates a 'Tyron DID-Read' operation, resolving any `Tyron DID-state` into its DID-Document */
    static read(state) {
        return __awaiter(this, void 0, void 0, function* () {
            const DID_DOC = yield did_url_scheme_1.default.validate(state.decentralized_identifier)
                .then((did_scheme) => __awaiter(this, void 0, void 0, function* () {
                const ID = did_scheme.did;
                /** Reads the public keys */
                const VERIFICATION_METHODS = state.verification_methods;
                let PUBLIC_KEY;
                let AUTHENTICATION;
                let ASSERTION_METHOD;
                let KEY_AGREEMENT;
                let CAPABILITY_INVOCATION;
                let CAPABILITY_DELEGATION;
                let XSGD_KEY;
                // Every key MUST have a Public Key Purpose as its ID
                for (let purpose of VERIFICATION_METHODS.keys()) {
                    const DID_URL = ID + '#' + purpose;
                    const KEY = VERIFICATION_METHODS.get(purpose);
                    const VERIFICATION_METHOD = {
                        id: DID_URL,
                        type: 'SchnorrSecp256k1VerificationKey2019',
                        publicKeyBase58: zcrypto.encodeBase58(KEY)
                    };
                    switch (purpose) {
                        case verification_method_models_1.PublicKeyPurpose.General:
                            PUBLIC_KEY = VERIFICATION_METHOD;
                            break;
                        case verification_method_models_1.PublicKeyPurpose.Auth:
                            AUTHENTICATION = VERIFICATION_METHOD;
                            break;
                        case verification_method_models_1.PublicKeyPurpose.Assertion:
                            ASSERTION_METHOD = VERIFICATION_METHOD;
                            break;
                        case verification_method_models_1.PublicKeyPurpose.Agreement:
                            KEY_AGREEMENT = VERIFICATION_METHOD;
                            break;
                        case verification_method_models_1.PublicKeyPurpose.Invocation:
                            CAPABILITY_INVOCATION = VERIFICATION_METHOD;
                            break;
                        case verification_method_models_1.PublicKeyPurpose.Delegation:
                            CAPABILITY_DELEGATION = VERIFICATION_METHOD;
                            break;
                        case verification_method_models_1.PublicKeyPurpose.XSGD:
                            XSGD_KEY = VERIFICATION_METHOD;
                            break;
                        default:
                            throw new ErrorCode_1.default("InvalidPurpose", `The resolver detected an invalid Public Key Purpose`);
                    }
                }
                ;
                /***            ****            ***/
                /** Service property */
                const services = state.services;
                const SERVICES = [];
                for (let id of services.keys()) {
                    const TYPE_URI = services.get(id);
                    const TYPE = TYPE_URI[0];
                    const URI = TYPE_URI[1];
                    const SERVICE = {
                        id: ID + '#' + id,
                        type: TYPE,
                        endpoint: URI
                    };
                    SERVICES.push(SERVICE);
                }
                /** The `Tyron DID-Document` */
                const SCHEME = {
                    id: ID,
                    verificationMethods: {},
                    service: []
                };
                if (XSGD_KEY !== undefined) {
                    SCHEME.verificationMethods.xsgdKey = XSGD_KEY;
                }
                if (PUBLIC_KEY !== undefined) {
                    SCHEME.verificationMethods.publicKey = PUBLIC_KEY;
                }
                if (AUTHENTICATION !== undefined) {
                    SCHEME.verificationMethods.authentication = AUTHENTICATION;
                }
                if (ASSERTION_METHOD !== undefined) {
                    SCHEME.verificationMethods.assertionMethod = ASSERTION_METHOD;
                }
                if (KEY_AGREEMENT !== undefined) {
                    SCHEME.verificationMethods.keyAgreement = KEY_AGREEMENT;
                }
                if (CAPABILITY_INVOCATION !== undefined) {
                    SCHEME.verificationMethods.capabilityInvocation = CAPABILITY_INVOCATION;
                }
                if (CAPABILITY_DELEGATION !== undefined) {
                    SCHEME.verificationMethods.capabilityDelegation = CAPABILITY_DELEGATION;
                }
                if (SERVICES.length !== 0) {
                    SCHEME.service = SERVICES;
                }
                return new DidDoc(SCHEME);
            }))
                .catch(err => { throw err; });
            return DID_DOC;
        });
    }
}
exports.default = DidDoc;
//# sourceMappingURL=did-document.js.map