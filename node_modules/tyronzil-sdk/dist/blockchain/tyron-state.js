"use strict";
/*
    tyronzil-sdk: Tyron DID SDK - Zilliqa's DID-Method at www.tyronZIL.com
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const zilliqa_init_1 = __importDefault(require("./zilliqa-init"));
const smart_util_1 = __importDefault(require("./smart-contracts/smart-util"));
const sidetree_1 = require("../decentralized-identity/protocols/sidetree");
const ErrorCode_1 = __importDefault(require("../decentralized-identity/util/ErrorCode"));
class TyronState {
    constructor(state) {
        this.contract_owner = state.contract_owner;
        this.decentralized_identifier = state.decentralized_identifier;
        this.tyron_hash = state.tyron_hash;
        this.did_status = state.did_status;
        this.verification_methods = state.verification_methods;
        this.services = state.services;
        this.did_update_key = state.did_update_key;
        this.did_recovery_key = state.did_recovery_key;
        this.created = state.created;
        this.ledger_time = state.ledger_time;
        this.sidetree_transaction_number = state.sidetree_transaction_number;
    }
    /** Fetches the current state from the blockchain
     * @params addr: the Zilliqa address of the user's smart-contract
    */
    static fetch(network, didcAddr) {
        return __awaiter(this, void 0, void 0, function* () {
            const ZIL_INIT = new zilliqa_init_1.default(network);
            const tyron_state = yield ZIL_INIT.API.blockchain.getSmartContractState(didcAddr)
                .then((didc_state) => __awaiter(this, void 0, void 0, function* () {
                const STATUS = yield smart_util_1.default.getStatus(didc_state.result.did_status);
                switch (STATUS) {
                    case sidetree_1.OperationType.Deactivate:
                        throw new ErrorCode_1.default("DidDeactivated", "The requested DID is deactivated");
                    default:
                        const STATE = {
                            contract_owner: String(didc_state.result.contract_owner),
                            decentralized_identifier: String(didc_state.result.decentralized_identifier),
                            tyron_hash: yield smart_util_1.default.getValue(didc_state.result.tyron_hash),
                            did_status: STATUS,
                            verification_methods: yield smart_util_1.default.intoMap(didc_state.result.verification_methods),
                            services: yield smart_util_1.default.fromServices(didc_state.result.services),
                            did_update_key: yield smart_util_1.default.getValue(didc_state.result.did_update_key),
                            did_recovery_key: yield smart_util_1.default.getValue(didc_state.result.did_recovery_key),
                            created: Number(didc_state.result.created),
                            ledger_time: Number(didc_state.result.ledger_time),
                            sidetree_transaction_number: Number(didc_state.result.sidetree_transaction_number),
                        };
                        return new TyronState(STATE);
                }
            }))
                .catch((err) => { throw err; });
            return tyron_state;
        });
    }
}
exports.default = TyronState;
//# sourceMappingURL=tyron-state.js.map