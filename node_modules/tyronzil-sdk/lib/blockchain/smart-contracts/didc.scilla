(*
  Tyron: Decentralized identity application powered by Zilliqa
  Copyright (C) 2020 Julio Cesar Cabrapan Duarte

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
*)

scilla_version 0
import BoolUtils

(*------------------------*)
(* The Tyron DIDC Library *)
(*------------------------*)

library DIDC

(* Messages *)
(*----------*)
  let one_msg = 
    fun(msg: Message) => 
    let nil_msg = Nil{Message} in
    Cons{Message} msg nil_msg

  let two_msgs =
    fun(msg1: Message) =>
    fun(msg2: Message) =>
      let msgs_tmp = one_msg msg2 in
      Cons{Message} msg1 msgs_tmp

(* The SSI Trinity ADT *)
(*---------------------*)
  type SsiTrinity =
    | User              (* the contract owner *)
    | Agent of String   (* the agent is the entity running the DID-Client - string avatar of .agent *)
    | Tyron             (* the init.tyron contract *)
   

(* The Status ADTs *)
(*-----------------*)
  type DidStatus =
    | Undefined
    | Initialized
    | Created
    | Updated
    | Recovered
    | Deactivated
  
  type CheckStatus =
    | NotDeactivated
    | Init
    | Operational   (* created, updated or recovered *)

(* The Document ADTs *)
(*-------------------*)
  type Action =
    | Add
    | Remove
  
  type DataTransferProtocol =
    | Https
    | Git
    | Ssh
  
  type ServiceEndpoint =
    | ServiceEndpoint of DataTransferProtocol String
    
  type DidService =
    | DidService of String ServiceEndpoint        (* the type & endpoint *)
    
  type Document =
    | VerificationMethod of Action String ByStr33       (* string: key purpose OR service ID *)
    | Service of Action String DidService
    
(* Constants *)
(*-----------*)
  let user = User
  let tyron = Tyron
  let dotDid = ".did"
  let notDeactivated = NotDeactivated
  let init = Init
  let operational = Operational
  let zero = Uint128 0
  let hundred = Uint128 100
  let undefined = "undefined"
  let deactivated = "deactivated"
  let period = Uint128 14065        (*approx. 1 week*)

(* Error events *)
(*--------------*)
  type Error =
    | CodeNotTyron
    | CodeWrongAmount
    | CodeNotAgent
    | CodeWrongStatus
    | CodeNotOwner
    | CodeWrongSignature
    | CodeUndefinedKey
    | CodeRepeatedKey
    | CodeNotSsiToken
    | CodeNotProxy
    | CodeNotValid
 
  let make_error =
    fun(error: Error) =>
      let result = 
        match error with
          | CodeNotTyron              => Int32 -1
          | CodeWrongAmount           => Int32 -2
          | CodeNotAgent              => Int32 -3
          | CodeWrongStatus           => Int32 -4
          | CodeNotOwner              => Int32 -5
          | CodeWrongSignature        => Int32 -6
          | CodeUndefinedKey          => Int32 -7
          | CodeRepeatedKey           => Int32 -8
          | CodeNotSsiToken           => Int32 -9
          | CodeNotProxy              => Int32 -10
          | CodeNotValid              => Int32 -11
        end
      in
      {_exception: "Error"; code: result}

  let deconstruct_option_uint128 =
    fun(option: Option Uint128) =>
      match option with
        | Some value => value
        | _ => zero
      end

  let update_methods: forall 'A. List Document -> Map String ByStr33 -> Map String ByStr33 =
  tfun 'A =>
  fun(l: List Document) =>
  fun(prevMethods: Map String ByStr33) =>
    let foldl = @list_foldl Document Map String ByStr33 in
      let iter =
        fun(map: Map String ByStr33) =>
        fun(h: Document) =>
          match h with
            | VerificationMethod action purpose key =>
                match action with
                  | Add =>
                      builtin put map purpose key
                  | Remove =>
                      builtin remove map purpose
                end
            | _ => map
          end
      in
    foldl iter prevMethods l
  
  let make_endpoint =
    fun(i: DidService) =>
      match i with
        | DidService t endpoint =>
            match endpoint with
              | ServiceEndpoint transfer e =>
                  match transfer with
                    | Https =>
                        let prefix = "https://" in
                        let this_uri = builtin concat prefix e in
                        Pair{String String} t this_uri
                    | Git =>
                        let prefix = "git://" in
                        let this_uri = builtin concat prefix e in
                        Pair{String String} t this_uri
                    | Ssh =>
                        let prefix = "ssh://" in
                        let this_uri = builtin concat prefix e in
                        Pair{String String} t this_uri
                  end
            end
      end

  let update_services: forall 'A. List Document -> Map String Pair String String -> Map String Pair String String =
  tfun 'A =>
  fun(l: List Document) =>
  fun(prevServices: Map String Pair String String) =>
    let foldl = @list_foldl Document Map String Pair String String in
      let iter =
        fun(map: Map String Pair String String) =>
        fun(h: Document) =>
          match h with
            | Service action id didService =>
                match action with
                  | Add =>
                      let endpoint = make_endpoint didService in 
                      builtin put map id endpoint
                  | Remove =>
                      builtin remove map id
                end
            | _ => map
          end
      in
    foldl iter prevServices l

(*---------------------*)
(* The xWallet Library *)
(*---------------------*)
  type XDirection =
    | In
    | Out
  
  let incoming = In
  let outcoming = Out
  
(*-------------------------------------*)
(* The Tyron DID Smart Contract (DIDC) *)
(*-------------------------------------*)

contract DIDC(
(* Immutable fields declaration *)
(*------------------------------*)

  (* The user is the owner of their DIDC *)
  initContractOwner: ByStr20,
  
  (* The address of the init.tyron contract *)
  initTyron: ByStr20
  )
      with
        let init = 0x63e2d8484187de4f66a571c098f3b51a793f055b in
        builtin eq init initTyron
      =>

(* Mutable fields declaration *)
(*----------------------------*)
  (* The user's Zilliqa address *)
  field contract_owner: ByStr20 = initContractOwner

  (* The Tyron DID *)
  field decentralized_identifier: String = undefined
  
  (* The address of the init.tyron contract's latest implementation *)
  field init_tyron: ByStr20 = initTyron
  
  (* The Decentralized Identifier's DNS resource records 
   @key: domain 
   @value: avatar *)
  field resource_records: Map String String = Emp String String
  
  (* The user's agents
   @key: avatar.agent
   @value: agent's address *)
  field ssi_agents: Map String ByStr20 = Emp String ByStr20
  field latest_agent: ByStr20 = initContractOwner
  
  (* The status of the DID *)
  field did_status: DidStatus = Undefined

  (* The Tyron verification methods
   @key: key purpose
   @value: public key of type "SchnorrSecp256k1VerificationKey2019" *)
  field verification_methods: Map String ByStr33 = Emp String ByStr33
  
  (* The DID services
   @key: ID
   @value: the type & URI *)
  field services: Map String Pair String String = Emp String Pair String String
  
  (* The Tyron Hash *)
  field tyron_hash: Option ByStr = None{ByStr}
  
  (* The public key for the next DID-Update operation *)
  field did_update_key: Option ByStr33 = None{ByStr33}
  
  (* The public key for the next DID-Recover or DID-Deactivate operation *)
  field did_recovery_key: Option ByStr33 = None{ByStr33}
  
  (* The block number when the DID-Create operation occurred *)
  field created: BNum = BNum 0
  
  (* The block number when the last tyronZIL transaction occurred *)  
  field ledger_time: BNum = BNum 0
  
  (* A monotonically increasing number representing the amount of tyronZIL transactions that have taken place *)
  field transaction_number: Uint128 = Uint128 0

  (* The following fields are set by the init.tyron contract in the InitCallBack transition *)
      (* The operation cost of tyronZIL transaction
       @key: domain
       @value: cost *)
      field operation_cost: Map String Uint128 = Emp String Uint128
      
      (* The address of the Tyron Pungtas Foundation *)
      field foundation_address: ByStr20 = initContractOwner
      
      (* The agent's commission as a % of the operation_cost
       @key: avatar.agent
       @value: comission *)
      field agent_commission: Map String Uint128 = Emp String Uint128
      field latest_commission: Uint128 = Uint128 0

  (* The xWallet fields *)
  (*--------------------*)
  (* SSI Token implementations
   @key:  address
   @value: token name *)
  field xWallet: Map ByStr20 String = Emp ByStr20 String

  (* SSI Token balances
   @key: token name
   @value: balance *)
  field xBalances: Map String Uint128 = Emp String Uint128

  (* SSI Token proxies
   @key: token name
   @value: address *)
  field xProxies: Map String ByStr20 = Emp String ByStr20
  
  (* The Donation Scheme
   @key: campaign name
   @value: campaign's starting block number *)
  field donation: Map String BNum = Emp String BNum

(*------------*)
(* Procedures *)
(*------------*)

  (* The Tyron DID-Scheme - this procedure generates the user's Decentralized Identifier & the Tyron Hash *)
  procedure DidScheme()
    this_did =
      let did_prefix = "did:tyron:zil:test:" in
      let did_suffix = builtin to_string _this_address in
      builtin concat did_prefix did_suffix;
    decentralized_identifier := this_did;
    this_th =
      let hash = builtin sha256hash this_did in
      builtin to_bystr hash;
    th = Some{ByStr} this_th;
    tyron_hash := th
  end
  
  (* The procedure to throw an error *)
  procedure ThrowError(
    err: Error
  )
    e = make_error err;
    throw e
  end
  
  (* Validates that the order comes from an SsiTrinity entity *)
  procedure IsRightCaller(
    caller: SsiTrinity
  )
    match caller with
      | User =>
          the_owner <- contract_owner;
          is_owner = builtin eq the_owner _sender;
          match is_owner with
            | True =>
            | False =>
                err = CodeNotOwner;
                ThrowError err
          end
      | Tyron =>
          this_tyron <- init_tyron;
          is_tyron = builtin eq this_tyron _sender;
          match is_tyron with
            | True =>
            | False =>
                err = CodeNotTyron;
                ThrowError err
          end
      | Agent avatar =>
          this_agent <- ssi_agents[avatar];
          match this_agent with
            | Some agent_addr =>
                latest_agent := agent_addr;
                commission <- agent_commission[avatar];
                this_agent_commission = deconstruct_option_uint128 commission;
                latest_commission := this_agent_commission
            | None =>
                err = CodeNotAgent;
                ThrowError err
          end
    end
  end

  (* Verifies that the DID-Status is correct for the given operation *)
  procedure IsRightStatus(
    check: CheckStatus
  )
    this_status <- did_status;
    match check with
      | NotDeactivated =>
          match this_status with
            | Deactivated =>
                err = CodeWrongStatus;
                ThrowError err
            | _ =>
          end
      | Init =>
          match this_status with
            | Initialized =>
            | _ =>
                err = CodeWrongStatus;
                ThrowError err
          end
      | Operational =>
          match this_status with
            | Created =>
            | Updated =>
            | Recovered =>
            | _ =>
                err = CodeWrongStatus;
                ThrowError err
          end
    end
  end
  
  (* Checks that the donation campaign code is within the limitation period of 1-week *)
  procedure Donation(
    campaign: String
  )
    this_starting_block <- donation[campaign];
    current_block <- & BLOCKNUMBER;
    match this_starting_block with
      | Some starting_block =>
          is_valid =
            let limit = builtin badd starting_block period in
            builtin blt current_block limit;
          match is_valid with
            | True =>
            | False =>
                err = CodeNotValid;
                ThrowError err
          end
      | None =>
          err = CodeNotValid;
          ThrowError err
    end
  end
  
  (* Executes the payment to the agent and foundation *)
  procedure Payment(
    domain: String,
    agent: String
  )
    calling_agent = Agent agent;
    IsRightCaller calling_agent;
    this_cost <- operation_cost[domain];
    match this_cost with
      | Some cost =>
          is_donation = builtin eq cost zero;
          match is_donation with
            | True => Donation domain
            | False =>
                (* To be accepted, the payment MUST be exact *)
                amount_is_correct = builtin eq _amount cost;
                match amount_is_correct with
                  | True =>
                      (* The DIDC accepts the incoming transfer *)
                      accept;
                      agent_addr <- latest_agent;
                      (* Calculates payment to the agent *)
                      this_agent_commission <- latest_commission;
                      payment_to_agent =
                        let percent = builtin div _amount hundred in
                        builtin mul this_agent_commission percent;
                      msg_to_agent = {
                        _tag: "";
                        _recipient: agent_addr;
                        _amount: payment_to_agent
                      };
                      e = {
                        _eventname: "Agent_payment_verified";
                        agent: agent;
                        agent_address: agent_addr;
                        agent_commission: this_agent_commission
                      };
                      event e;
                      (* Calculates payment to the foundation *)
                      payment_to_foundation = builtin sub _amount payment_to_agent;
                      this_foundation_address <- foundation_address;
                      msg_to_foundation = {
                        _tag: "";
                        _recipient: this_foundation_address;
                        _amount: payment_to_foundation
                      };
                      (* Sends both payments at once *)
                      msgs = two_msgs msg_to_agent msg_to_foundation;
                      send msgs
                  | False => 
                      err = CodeWrongAmount;
                      ThrowError err
                end
          end
      | None =>
          err = CodeNotSsiToken;
          ThrowError err
    end
  end
  
  (* Verifies the Schnorr signature that comes with the signed data corresponds with the public DID-Keys stored in the contract *)
  procedure IsRightSignature(
    signedData: ByStr,
    sig: ByStr64,
    key: Option ByStr33
  )
    match key with
      | Some pubk =>
          signature_is_right = builtin schnorr_verify pubk signedData sig;
          match signature_is_right with
            | True =>
            | False =>
                err = CodeWrongSignature;
                ThrowError err
          end
      | None =>
          err = CodeUndefinedKey;
          ThrowError err
    end
  end
  
  (* Updates the verification methods and services map fields *)
  procedure UpdateDocument(
    status: CheckStatus,
    newDocument: List Document
  )
    current_methods <- verification_methods;
    prev_methods =
      match status with
        | Operational => current_methods
        | _ => Emp String ByStr33
      end;
    update_methods = @update_methods Document;
    updated_methods = update_methods newDocument prev_methods;
    verification_methods := updated_methods;
    current_services <- services;
    prev_services =
      match status with
        | Operational => current_services
        | _ => Emp String Pair String String
      end;
    update_services = @update_services Document;
    updated_services = update_services newDocument prev_services;
    services := updated_services
  end
    
  (* Validates that the new public DID-Key is different from before *)
  procedure IsValidKey(
    didKey: Option ByStr33,
    key: ByStr33
  )
    match didKey with
      | Some pubk =>
          is_same_key = builtin eq pubk key;
          match is_same_key with
            | True =>
                err = CodeRepeatedKey;
                ThrowError err
            | False =>
          end
      | None =>
          err = CodeUndefinedKey;
          ThrowError err
    end
  end

  (* Generates a timestamp *)
  procedure Timestamp()
    current_block <- & BLOCKNUMBER;
    ledger_time := current_block;
    latest_tx_number <- transaction_number;
    new_tx_number =
      let incrementor = Uint128 1 in
      builtin add latest_tx_number incrementor;
    transaction_number := new_tx_number
  end

(*-------------*)
(* Transitions *)
(*-------------*)

  (* Updates the Zilliqa address of the user aka contract owner*)
  transition UpdateOwner(
    newOwner: ByStr20
  )
    IsRightCaller user;
    contract_owner := newOwner
  end

  (* Updates the init.tyron contract to its latest implementation - only the user can execute this transition *)
  transition UpdateInit(
    newInit: ByStr20
  )
    IsRightCaller user;
    init_tyron := newInit;
    e = {
      _eventname: "Updated_init.tyron";
      new_init_tyron: newInit
    };
    event e
  end

  (* Sets the agent's info into the user's DIDC
   * Sends a message to the init.tyron contract that in return calls the InitCallBack transition *)
  transition Init(
    agent: String   
  )
    IsRightStatus notDeactivated;
    this_tyron <- init_tyron;
    msg = {
      _tag: "Init";
      _recipient: this_tyron;
      _amount: zero;
      agent: agent
    };
    msg_init = one_msg msg;
    send msg_init
  end

  (* The init.tyron contract calls this transition to set the operation cost, foundation's address and agent's domain name, address & commission *)
  transition InitCallBack(
    operationCost: Uint128,
    foundationAddr: ByStr20,
    agent: String,
    agentAddr: ByStr20,
    agentCommission: Uint128
  )
    IsRightCaller tyron;
    operation_cost[dotDid] := operationCost;
    foundation_address := foundationAddr;
    ssi_agents[agent] := agentAddr;
    agent_commission[agent] := agentCommission;
    this_status <- did_status;
    match this_status with
      | Undefined =>
          new_status = Initialized;
          did_status := new_status
      | _ =>
    end;
    did <- decentralized_identifier;
    e = {
      _eventname: "DIDC_initialized";
      decentralized_identifier: did;
      agent: agent;
      agent_commission: agentCommission
    };
    event e;
    Timestamp
  end

  (* Sets a domain name for the Decentralized Identifier *)
  transition SetSsiDomain(
    domain: String,
    avatar: String
  )
    IsRightStatus operational;
    IsRightCaller user;
    this_cost <- operation_cost[dotDid];
    match this_cost with
      | Some op_cost =>
          amount_is_correct = builtin eq _amount op_cost;
          this_tyron <- init_tyron;
          match amount_is_correct with
            | True =>
                accept;
                msg = {
                  _tag: "SetSsiDomain";
                  _recipient: this_tyron;
                  _amount: _amount;
                  domain: domain;
                  avatar: avatar
                };
                msg_domain = one_msg msg;
                send msg_domain
            | False =>
                err = CodeWrongAmount;
                ThrowError err
          end
      | None =>
          err = CodeNotSsiToken;
          ThrowError err
    end
  end

  (* The init.tyron contract calls this transition to set a user's domain name *)
  transition SetDomainCallBack(
    domain: String,
    avatar: String
    )
      IsRightCaller tyron;
      resource_records[domain] := avatar;
      domain_name = builtin concat avatar domain;
      did <- decentralized_identifier;
      e = {
        _eventname: "Updated_domain";
        decentralized_identifier: did;
        domain_name: domain_name
      };
      event e;
      Timestamp
  end

  (* Executes a Tyron DID-Create operation *)
  transition DidCreate(
    agent: String,
    document: List Document,
    updateKey: ByStr33,
    recoveryKey: ByStr33
    )
      IsRightStatus init;
      Payment dotDid agent;
      IsRightCaller user;
      DidScheme;
      UpdateDocument init document;
      is_same_key = builtin eq updateKey recoveryKey;
      match is_same_key with
        | True =>
            err = CodeRepeatedKey;
            ThrowError err
        | False =>
            update_key = Some{ByStr33} updateKey;
            did_update_key := update_key;
            recovery_key = Some{ByStr33} recoveryKey;
            did_recovery_key := recovery_key;
            new_status = Created;
            did_status := new_status;
            current_block <- & BLOCKNUMBER;
            created := current_block;
            did <- decentralized_identifier;
            e = {
              _eventname: "DID_created";
              decentralized_identifier: did
            };
            event e;
            Timestamp
      end
  end
  
  (* Executes a Tyron DID-Recover operation *)
  transition DidRecover(
    agent: String,
    newDocument: List Document,
    docHash: ByStr32,
    signature: ByStr64,
    newUpdateKey: ByStr33,
    newRecoveryKey: ByStr33
    )
      IsRightStatus operational;
      Payment dotDid agent;
      IsRightCaller user;
      did_key <- did_recovery_key;
      signed_data = builtin to_bystr docHash;
      IsRightSignature signed_data signature did_key;
      UpdateDocument init newDocument;
      IsValidKey did_key newRecoveryKey;
      did_ukey <- did_update_key;
      IsValidKey did_ukey newRecoveryKey;
      next_recovery_key = Some{ByStr33} newRecoveryKey;
      did_recovery_key := next_recovery_key;
      IsValidKey did_key newUpdateKey;
      IsValidKey did_ukey newUpdateKey;
      next_update_key = Some{ByStr33} newUpdateKey;
      did_update_key := next_update_key;
      is_same_key = builtin eq newUpdateKey newRecoveryKey;
      match is_same_key with
        | True =>
            err = CodeRepeatedKey;
            ThrowError err
        | False =>
            new_status = Recovered;
            did_status := new_status;
            did <- decentralized_identifier;
            e = {
              _eventname: "DID_recovered";
              decentralized_identifier: did
            };
            event e;
            Timestamp
      end
  end
  
  (* Executes a Tyron DID-Update operation *)
  transition DidUpdate(
    agent: String,
    newDocument: List Document,
    docHash: ByStr20,
    signature: ByStr64,
    newUpdateKey: ByStr33
    )
      IsRightStatus operational;
      Payment dotDid agent;
      IsRightCaller user;
      did_key <- did_update_key;
      signed_data = builtin to_bystr docHash;
      IsRightSignature signed_data signature did_key;
      UpdateDocument operational newDocument;
      IsValidKey did_key newUpdateKey;
      did_rkey <- did_recovery_key;
      IsValidKey did_rkey newUpdateKey;
      next_update_key = Some{ByStr33} newUpdateKey;
      did_update_key := next_update_key;
      new_status = Updated;
      did_status := new_status;
      did <- decentralized_identifier;
      e = {
        _eventname: "DID_updated";
        decentralized_identifier: did
      };
      event e;
      Timestamp
  end
  
  (* Executes a Tyron DID-Deactivate operation *)
  transition DidDeactivate(
    agent: String,
    signature: ByStr64
  ) 
    IsRightStatus operational;
    Payment dotDid agent;
    IsRightCaller user;
    did_key <- did_recovery_key;
    this_th <- tyron_hash;
    match this_th with
      | Some th =>
          IsRightSignature th signature did_key
      | None =>
          err = CodeNotTyron;
          ThrowError err
    end;
    deactivated_key = None{ByStr33};
    did_update_key := deactivated_key;
    did_recovery_key := deactivated_key;
    deactivated_methods = Emp String ByStr33;
    verification_methods := deactivated_methods;
    deactivated_services = Emp String Pair String String;
    services := deactivated_services;
    new_status = Deactivated;
    did_status := new_status;
    did <- decentralized_identifier;
    e = {
      _eventname: "DID_deactivated";
      decentralized_identifier: did
    };
    event e;
    Timestamp
  end

(*---------*)
(* xWallet *)
(*---------*)

  (* Verifies the validity, checks & updates the balance of the SSI Tokens *)
  procedure XWallet(
    direction: XDirection,
    amount: Uint128
  )
    this_token <- xWallet[_sender];
    match this_token with
      | Some token =>
          this_balance <- xBalances[token];
          balance = deconstruct_option_uint128 this_balance;
          match direction with
            | In =>
                new_balance = builtin add balance amount;
                xBalances[token] := new_balance
            | Out =>
                new_balance = builtin sub balance amount;
                xBalances[token] := new_balance
          end
      | None =>
          err = CodeNotSsiToken;
          ThrowError err
    end
  end

  (* To set/update an SSI Token *)
  transition SsiToken(
    token: String
  )
    IsRightStatus operational;
    IsRightCaller user;
    this_token_key <- verification_methods[token];
    match this_token_key with
      | Some token_key =>
          this_tyron <- init_tyron;
          msg = {
            _tag: "SsiToken";
            _recipient: this_tyron;
            _amount: zero;
            token: token
          };
          update_token = one_msg msg;
          send update_token
      | None =>
          err = CodeNotSsiToken;
          ThrowError err
    end
  end
  
  (* The init.tyron contract calls this transition to update an SSI Token to its latest implementation *)
  transition SsiTokenCallBack(
    token: String,
    proxyAddr: ByStr20,
    tokenAddr: ByStr20
  )
    IsRightCaller tyron;
    xWallet[tokenAddr] := token;
    xProxies[token] := proxyAddr;
    e = {
      _eventname: "Updated_SSI_Token ";
      ssi_token: token;
      proxy_addr: proxyAddr;
      token_addr: tokenAddr
    };
    event e
    end
  
  (* Adds native funds (ZIL) to the xWallet *)
  transition ZilIn()
    IsRightStatus operational;
    accept;
    did <- decentralized_identifier;
    e = {
      _eventname: "ZIL_received";
      decentralized_identifier: did;
      from: _sender;
      amount: _amount
    };
    event e
  end
  
  (* Sends ZIL from the xWallet to any recipient that implements the tag (e.g. "ZilIn", "") *)
  transition ZilOut(
    tag: String,
    to: ByStr20,
    amount: Uint128
  )
    IsRightStatus operational;
    IsRightCaller user;
    accept;
    msg = {
        _tag: tag;
        _recipient: to;
        _amount: amount
      };
    transfer = one_msg msg;
    send transfer;
    did <- decentralized_identifier;
    e = {
      _eventname: "ZIL_sent";
      decentralized_identifier: did;
      tag: tag;
      to: to;
      amount: amount
    };
    event e;
    Timestamp
  end

  (* Acceptance transition - must be defined or transfers to this xWallet will fail otherwise *)
  transition RecipientAcceptTransfer(
    sender : ByStr20,
    recipient : ByStr20,
    amount : Uint128
  )
    IsRightStatus operational;
    XWallet incoming amount;
    did <- decentralized_identifier;
    e = {
      _eventname: "Transfer_received";
      decentralized_identifier: did;
      sender: sender;
      amount: amount
    };
    event e
  end

  (* Transfers ZRC-2 SSI Tokens *)
  transition XTransfer(
    domain: String,
    token: String,
    agent: String,
    to: ByStr20,
    amount: Uint128,
    signature: ByStr64
  ) 
    IsRightStatus operational;
    IsRightCaller user;
    Payment domain agent;
    this_balance <- xBalances[token];
    balance = deconstruct_option_uint128 this_balance;
    is_enough = builtin lt amount balance;
    match is_enough with
      | True =>
          this_token_key <- verification_methods[token];
          signed_data = builtin to_bystr to;
          IsRightSignature signed_data signature this_token_key;
          this_proxy <- xProxies[token];
          match this_proxy with
            | Some proxy =>
                msg = {
                  _tag: "Transfer";
                  _recipient: proxy;
                  _amount: zero;
                  to: to;
                  amount: amount
                };
                transfer = one_msg msg;
                send transfer
            | None =>
                err = CodeNotProxy;
                ThrowError err
          end
      | False =>
          err = CodeWrongAmount;
          ThrowError err
    end
  end
  
  (* Callback transition - must be defined or transfers from this xWallet will fail otherwise *)
  transition TransferSuccessCallBack(
    sender: ByStr20, 
    recipient: ByStr20,
    amount : Uint128
  )
    IsRightStatus operational;
    XWallet outcoming amount;
    did <- decentralized_identifier;
    e = {
      _eventname: "Transfer_sent";
      decentralized_identifier: did;
      from: sender;
      to: recipient;
      amount: amount
    };
    event e;
    Timestamp
  end
  
  (* To initialize a donation campaign code *)
  transition Donate(
    campaign: String
  )
    IsRightStatus operational;
    this_tyron <- init_tyron;
      msg = {
        _tag: "Donate";
        _recipient: this_tyron;
        _amount: zero;
        campaign: campaign
      };
      msg_donate = one_msg msg;
      send msg_donate
  end

  transition DonateCallBack(
    campaign: String
  )
    IsRightCaller tyron;
    operation_cost[campaign] := zero;
    current_block <- & BLOCKNUMBER;
    donation[campaign] := current_block;
    did <- decentralized_identifier;
    e = {
      _eventname: "Donation_campaign";
      decentralized_identifier: did;
      campaign: campaign
    };
    event e;
    Timestamp
  end
