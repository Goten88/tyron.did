(*
  Tyron: Decentralized identity application powered by Zilliqa
  Copyright (C) 2020 Julio Cesar Cabrapan Duarte

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
*)

scilla_version 0

(*------------------------*)
(* The init.tyron library *)
(*------------------------*)

library Init

(* Messages *)
(*----------*)
  let one_msg =
    fun (msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Constants *)
(*-----------*)
  let zero = Uint128 0
  let dotDid = ".did"
  let dotTyron = ".tyron"
  let dotAgent = ".agent"

(* Error events *)
(*--------------*)
  type Error =
    | CodeNotFoundation
    | CodeInsufficientFunds
    | CodeDomainTaken
    | CodeNotAgent
    | CodeNotSsiDomain
    | CodeNotRightCaller
    | CodeNotCampaign

(* Functions *)
(*-----------*)
  let make_error =
    fun (error: Error) =>
      let result = 
        match error with
          | CodeNotFoundation       => Int32 -1
          | CodeInsufficientFunds   => Int32 -2
          | CodeDomainTaken         => Int32 -3
          | CodeNotAgent            => Int32 -4
          | CodeNotSsiDomain        => Int32 -5
          | CodeNotRightCaller      => Int32 -6
          | CodeNotCampaign         => Int32 -7
        end
      in
      {_exception : "Error"; code : result}

  let deconstruct_option_uint128 =
    fun(option: Option Uint128) =>
      match option with
        | Some value => value
        | _ => zero
      end

(*------------------------------------------------------------------------*)
(* init.tyron: The SSI Initialization & Domain Name System Smart Contract *)
(*------------------------------------------------------------------------*)

contract Init(
(* Immutable fields declaration *)
(*------------------------------*)

  (* The Tyron Pungtas Foundation is the owner of the init.tyron contract *)
  initFoundationAddr: ByStr20
  )

(* Mutable fields declaration *)
(*----------------------------*)
  (* The Zilliqa address of the Tyron Pungtas Foundation *)
  field foundation_addr: ByStr20 = initFoundationAddr

  (* The DID-Smart-Contract code by version
   @key: version
   @value: hex-encoded code *)
  field didc_code: Map String String = Emp String String
  
  (* The cost of a tyronZIL transaction
   @key: domain OR contract.tyron
   @value: cost as % of the amount *)
  field operation_cost: Map String Uint128 = Emp String Uint128
  
  (* The agent's commission as a % of share 
   - the user has 51% of the share
   - Tyron Pungtas Foundation 51% of the remaining 49 %
   - the agent earns the rest and can offer promotions
   @key: avatar.agent
   @value: max 24% *)
  field agent_commission: Map String Uint128 = Emp String Uint128
  
  (* The DNS records
   @key: SsiDomain (e.g. ".did", ".tyron", ".agent")
   @value: Map of
            @key: avatar
            @value: address *)
  field dns: Map String (Map String ByStr20) = Emp String (Map String ByStr20)

  (* The proxy addresses of the SSI Tokens
   @key: token 
   @value: proxy address *)
   field ssi_tokens: Map String ByStr20 = Emp String ByStr20
  
  (* Token implementations
   @key: proxy address
   @value: implementation address *)
   field ssi_token_implementations: Map ByStr20 ByStr20 = Emp ByStr20 ByStr20

(*------------*)
(* Procedures *)
(*------------*)

(* The procedure to throw an error *)
  procedure ThrowError(
    err: Error
    )
      e = make_error err;
      throw e
  end
  
(* Executes the payment to the foundation *)
  procedure Payment(
    domain: String
  )
    this_registration_cost <- operation_cost[domain];
    match this_registration_cost with
      | Some registration_cost =>
          (* To be accepted, the payment MUST be exact *)
          amount_is_correct = builtin eq _amount registration_cost;
          match amount_is_correct with
            | True =>
                (* The contract accepts the incoming transfer *)
                accept;
                the_foundation <- foundation_addr;
                msg = {
                  _tag: "";
                  _recipient: the_foundation;
                  _amount: _amount
                };
                msg_to_foundation = one_msg msg;
                send msg_to_foundation
            | False => 
                err = CodeInsufficientFunds;
                ThrowError err
          end
      | None =>
          err = CodeNotSsiDomain;
          ThrowError err
    end
  end
  
(* Validates the _sender *)
  procedure IsRightCaller(
    check: ByStr20
  )
    is_correct = builtin eq check _sender;
      match is_correct with
        | True =>
        | False =>
            err = CodeNotRightCaller;
            ThrowError err
      end
  end

(*-------------*)
(* Transitions *)
(*-------------*)

  (* Updates the address of the Tyron Pungtas Foundation *)
  transition UpdateOwner(
    newOwner: ByStr20
  )
    the_foundation <- foundation_addr;
    IsRightCaller the_foundation;
    foundation_addr := newOwner
  end
  
  (* Sets the DID-Smart-Contract code *)
  transition SetDidCode(
    version: String,
    code: String
  )
    the_foundation <- foundation_addr;
    IsRightCaller the_foundation;
    didc_code[version] := code;
    e = {
      _eventname: "Updated_DIDC";
      version: version;
      code: code
    };
    event e
  end
  
  (* Sets the operation_cost by SSI domain (domain name or donation campaign code) *)
  transition OperationCost(
    domain: String,
    cost: Uint128
  )
    the_foundation <- foundation_addr;
    IsRightCaller the_foundation;
    operation_cost[domain] := cost
  end
  
  (* Sets the agent_commission *)
  transition AgentCommission(
    agent: String,
    commission: Uint128
  )
    this_agent_addr <- dns[dotAgent][agent];
    match this_agent_addr with
      | Some agentAddr =>
          IsRightCaller agentAddr;
          agent_commission[agent] := commission   (*to-do make sure about %*)
      | None =>
          err = CodeNotAgent;
          ThrowError err
    end
  end
  
  (* Called by the DIDC to set the .did operation cost, foundation address & agent's account *)
  transition Init(
    agent: String
  )
    this_agent_addr <- dns[dotAgent][agent];
    match this_agent_addr with
      | Some agent_addr =>
          this_cost <- operation_cost[dotDid];
          the_operation_cost = deconstruct_option_uint128 this_cost;
          this_commission <- agent_commission[agent];
          the_agent_commission = deconstruct_option_uint128 this_commission;
          the_foundation <- foundation_addr;
          msg = {
            _tag: "InitCallBack";
            _recipient: _sender;
            _amount: zero;
            operationCost: the_operation_cost;
            foundationAddr: the_foundation;
            agent: agent;
            agentAddr: agent_addr;
            agentCommission: the_agent_commission
          };
          msg_init = one_msg msg;
          send msg_init
      | None =>
          err = CodeNotAgent;
          ThrowError err
    end
  end
  
  (* Sets a Self-Sovereign Identity domain name in the DNS *)
  transition SetSsiDomain(
    domain: String,
    avatar: String
  )
    Payment domain;
    taken <- exists dns[domain][avatar];
    match taken with
      | True =>
          err = CodeDomainTaken;
          ThrowError err
      | False =>
          dns[domain][avatar] := _sender;
          msg = {
            _tag: "SetDomainCallBack";
            _recipient: _sender;
            _amount: zero;
            domain: domain;
            avatar: avatar
          };
          msg_domain = one_msg msg;
          send msg_domain
    end
  end

  (* Sets the token name, proxy address and implementation address of an SSI Token *)
  transition SetSsiToken(
    token: String,
    proxyAddr: ByStr20,
    tokenAddr: ByStr20
  )
    the_foundation <- foundation_addr;
    IsRightCaller the_foundation;
    ssi_tokens[token] := proxyAddr;
    ssi_token_implementations[proxyAddr] := tokenAddr;
    e = {
      _eventname: "Updated_SSI_Token";
      token: token;
      proxy_address: proxyAddr;
      token_implementation_address: tokenAddr
    };
    event e
  end

  (* Called by a DIDC to initialize an SSI Token in its state *)
  transition SsiToken(
    token: String
  )
    this_proxy_addr <- ssi_tokens[token];
    match this_proxy_addr with
      | Some proxy_addr =>
          this_token_impl <- ssi_token_implementations[proxy_addr];
          match this_token_impl with
            | Some token_impl =>
                msg = {
                  _tag: "SsiTokenCallBack";
                  _recipient: _sender;
                  _amount: zero;
                  token: token;
                  proxyAddr: proxy_addr;
                  tokenAddr: token_impl
                };
                msg_token = one_msg msg;
                send msg_token
            | None =>
                err = CodeNotSsiDomain;
                ThrowError err
          end
      | None =>
          err = CodeNotSsiDomain;
          ThrowError err
    end
  end

  (* Called by a DIDC to initialize a donation campaign code in its state *)
  transition Donate(
    campaign: String
  )
    this_cost <- operation_cost[campaign];
    match this_cost with
      | Some cost =>
          is_donation = builtin eq cost zero;
          match is_donation with
            | True =>
                msg = {
                  _tag: "DonateCallBack";
                  _recipient: _sender;
                  _amount: zero;
                  campaign: campaign
                };
                donation_init = one_msg msg;
                send donation_init
            | False =>
                err = CodeNotCampaign;
                ThrowError err
          end
      | None =>
          err = CodeNotCampaign;
          ThrowError err
    end
  end

  (* Removes a donation campaign code from the *operation_cost* map field *)
  transition DeleteCampaign(
    campaign: String
  )
    the_foundation <- foundation_addr;
    IsRightCaller the_foundation;
    delete operation_cost[campaign]
  end